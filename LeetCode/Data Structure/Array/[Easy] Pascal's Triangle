# https://leetcode.com/problems/pascals-triangle/

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        pas_dict = {
            1: [1],
            2: [1, 1]
        }
        
        if numRows == 1 or numRows == 2:
            return [pas_dict[row] for row in range(1, numRows + 1)]
        
        for row in range(3, numRows + 1):
            new_row = []
            
            for i in range(len(pas_dict[row - 1]) - 1):
                new_row.append(pas_dict[row - 1][i] + pas_dict[row - 1][i + 1])
                
            pas_dict[row] = [1] + new_row + [1]
        
        return [pas_dict[row] for row in range(1, numRows + 1)]
    
# Time complexity: O(n^2)?
# Space complexity: O(n^2)

# Update: Less space used

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:        
        if numRows == 1:
            return [[1]]
        elif numRows == 2:
            return [[1], [1, 1]]
        else:
            pas = [[1], [1,1]]
        
        for row in range(3, numRows + 1):
            new_row = []
            
            for i in range(len(pas[row - 2]) - 1):
                new_row.append(pas[row - 2][i] + pas[row - 2][i + 1])
                
            pas.append([1] + new_row + [1])
        
        return pas
        
