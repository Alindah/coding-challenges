# https://leetcode.com/problems/valid-sudoku/

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        
        # Check if rows are valid
        for row in board:
            if not self.isDistinct(row):
                return False
        
        # Determine columns and check if valid
        for i in range(len(board)):
            col = [board[row][i] for row in range(len(board))]
            if not self.isDistinct(col):
                return False
        
        # Determine boxes and check if valid
        box = []
        
        for m1 in range(3):
            for m2 in range(3):
                for r in range(3):
                    for c in range(3):
                        box.append(board[r + 3 * m1][c + 3 * m2])
                
                if not self.isDistinct(box):
                    return False

                box = []
                
        return True
        
    def isDistinct(self, arr) -> bool:
        # Create dictionary of 1-9 with value of 0 for number of instances
        num_set = {str(n):0 for n in range(1,10)}
        
        for n in arr:
            if n is not '.':
                num_set[n] += 1
                
                # If there is a duplicate, return False
                if num_set[n] > 1:
                    return False
        
        return True
        
# Time complexity: O(1)?
# Space complexity: O(1)?
# Since we have a constant number of inputs (9x9 = 81 inputs), 
# and we need to check every input (unless you disregard '.' entries), 
# which could improve the runtime for isDistinct() if rewritten.
